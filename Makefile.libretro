###########################################################################
#
#   Makefile.libretro
#
#   Makefile for building MAME and derivatives as libretro core libraries
#
#   Copyright (C) 2015 Libretro Team.
#   Licensing should be regarded as the same as that of the MAME project,
#   visit http://mamedev.org for more information.
#
#
#   Okay, basically this file exists to do the following:
#
#   1. Determine $ARCH and $platform from the cmdline, the environment, or
#      by figuring them out (as other libretro cores do).
#   2. Disable -Werror.  MAME upstream builds with -Werror, which is great
#      for developers but absolutely frustrating for users.  From our POV,
#      we're effectively users, and users who try to follow the bleeding
#      edge no less.  That means we get cut, and too often it's by some
#      random warning upstream hasn't squashed.
#   3. Set PYTHON_EXECUTABLE on non-Apple platforms.  Upstream assumes
#      python (no prefix) is python2, which basically NEVER happens now on
#      modern Linux systems, and isn't even common on Windows anymore.  It
#      should be python2 pretty much everywhere but Apple, and the exception
#      there is mostly because Apple hates GPLv3.
#   4. Enable VERBOSE.  Yes, MAME builds generate a metric crap-ton of
#      output, but when builds fail it's nice to know why.
#   5. Rename $ARCH and unset it.  Apple has a convention on the Mac of
#      letting you use $ARCH to specify what CPU architectures to build
#      for.  This is at odds to how libretro uses it, and solving that on
#      the libretro end is going to have to wait for a major overhaul of
#      how cores are built.  We're not ready to do that yet.
#
###########################################################################

###########################################################################
#
#   LIBRETRO PREFERRED DEFAULT SETTINGS
#
###########################################################################

# Disable -Werror as libretro is effectively a MAME user, not a developer
NOWERROR ?= 1

# This needs to be python2 at the moment everywhere but OS X (fixed later)
PYTHON_EXECUTABLE ?= python2

# Cause the build system to regenerate itself, in case it changed
REGENIE ?= 1

# Spew much output developers need if MAME's build breaks for some reason
VERBOSE ?= 1

# You probably shouldn't need to set this anymore (find libretro section of
# scripts/toolchain.lua)
# PTR64 = 1

###########################################################################
#
#   LIBRETRO PLATFORM GUESSING
#
#   If the caller doesn't specify $platform and $ARCH, we guess
#
###########################################################################

UNAME_S = $(shell uname -s)
UNAME_M = $(shell uname -m)
ifeq ($(platform),)
	platform = unix
	ifeq ($(UNAME_S),)
		platform = win
	else ifneq ($(findstring MINGW,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring Darwin,$(UNAME_S)),)
		platform = osx
	else ifneq ($(findstring win,$(UNAME_S)),)
		platform = win
	endif
endif
ifeq ($(ARCH),)
	LIBRETRO_CPU = $(ARCH)
endif
ifeq ($(LIBRETRO_CPU),)
	ifeq ($(UNAME_M),)
		ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
			LIBRETRO_CPU = x86_64
		endif
		ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
			LIBRETRO_CPU = x86_64
		endif
	else ifeq ($(UNAME_M),amd64)
		LIBRETRO_CPU = x86_64
	else
		LIBRETRO_CPU = $(UNAME_M)
	endif
endif

###########################################################################
#
#   LIBRETRO PLATFORM-SPECIFIC CONFIGURATION
#
#   Settings needed to get MAME to build everywhere we build it
#
###########################################################################

ifeq ($(platform), android)
#	PTR64 = 0
	# FIXME: Pass these to GENie and test...
#	CROSS_BUILD = 1
#	FORCE_DRC_C_BACKEND = 1
else ifeq ($(platform), osx)
	PYTHON_EXECUTABLE = python
else ifneq (,$(findstring ios,$(platform)))
#	PTR64 = 0
	PYTHON_EXECUTABLE = python
	# FIXME: Pass these to GENie and test...
#	CROSS_BUILD = 1
#	FORCE_DRC_C_BACKEND = 1
endif


###########################################################################
#
#   BUILD FLAGS
#
###########################################################################

BUILDFLAGS = REGENIE=$(REGENIE) VERBOSE=$(VERBOSE) NOWERROR=$(NOWERROR)
ifneq ($(PYTHON_EXECUTABLE),)
	BUILDFLAGS += PYTHON_EXECUTABLE=$(PYTHON_EXECUTABLE)
endif
ifeq ($(DEBUG),1)
	BUILDFLAGS += CONFIG=libretrodbg
else
	BUILDFLAGS += CONFIG=libretro
endif


###########################################################################
#
#   PLATFORM FLAGS
#
###########################################################################

PLATFLAGS =
ifneq ($(PTR64),)
	PLATFLAGS += PTR64=$(PTR64)
endif
ifneq ($(platform),)
	PLATFLAGS += LIBRETRO_OS="$(platform)"
endif
ifeq ($(platform),win)
	ifeq ($(MSYSTEM),MINGW64)
		MINGW64 ?= /mingw64
		PLATFLAGS += MINGW64="$(MINGW64)"
	else ifeq ($(MSYSTEM),MINGW32)
		MINGW32 ?= /mingw32
		PLATFLAGS += MINGW32="$(MINGW32)"
	endif
endif
ifneq ($(LIBRETRO_CPU),)
	PLATFLAGS += ARCH="" LIBRETRO_CPU="$(LIBRETRO_CPU)"
endif
ifneq ($(FORCE_DRC_C_BACKEND),)
	PLATFLAGS += FORCE_DRC_C_BACKEND="$(FORCE_DRC_C_BACKEND)"
endif

###########################################################################
#
#   TARGET FLAGS
#
###########################################################################

TARGETFLAGS =
ifneq ($(TARGET),)
	TARGETFLAGS += TARGET=$(TARGET)
endif
ifneq ($(SUBTARGET),)
	TARGETFLAGS += SUBTARGET=$(SUBTARGET)
endif


###########################################################################
#
#   MAKE RULES
#
#   We just call upstream GENie here with appropriate args
#
###########################################################################

all: build

build:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS)

clean:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) clean

.PHONY: all build clean


###########################################################################
#
#   OLD STUFF
#
#   What follows are bits of the old Makefile.libretro to help in porting
#   stuff that doesn't work to GENie.  When you get something that doesn't
#   work sorted, please trim the relevant bits below...
#
###########################################################################

### Unix
#ifeq ($(platform), unix)
#	TARGETLIB := $(TARGET)_libretro.so
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T -Wl,--no-undefined
#	CCOMFLAGS += $(fpic) -fsigned-char -finline  -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
#	PLATCFLAGS +=  -DALIGN_INTS -DALIGN_SHORTS -fstrict-aliasing -fno-merge-constants  $(fpic)
#	ifeq ($(VRENDER),opengl)
#		PLATCFLAGS += -DHAVE_GL
#		LIBS += -lGL
#	endif
#	LDFLAGS +=  $(fpic) $(SHARED)
#	REALCC = cc
#	BASELIBS +=  -lpthread
#	REALCC := gcc
#	CC := g++
#	AR := @ar
#	LD := g++
#	CCOMFLAGS += $(PLATCFLAGS)
#	LIBS += -lstdc++ -lpthread -ldl
#	ifneq (,$(findstring ppc,$(UNAME)))
#		BIGENDIAN=1
#	else
#		PLATCFLAGS += -DLSB_FIRST
#	endif
##
### Android
#else ifeq ($(platform), android)
#	# May need to move armplatform := 1 to above "include makefile"
#	armplatform := 1
#	TARGETLIB := $(TARGET)_libretro_android.so
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T
#	REALCC := @arm-linux-androideabi-gcc
#	CC := @arm-linux-androideabi-g++
#	AR := @arm-linux-androideabi-ar
#	LD := @arm-linux-androideabi-g++
#	CCOMFLAGS += $(fpic) -mstructure-size-boundary=32 -mthumb-interwork -falign-functions=16 -fsigned-char -finline  -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16 -Wno-psabi
#	CCOMFLAGS_INCOMPATIBLE :=
#	PLATCFLAGS += -march=armv7-a -mfloat-abi=softfp -DANDROID -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -fstrict-aliasing -fno-merge-constants -DSDLMAME_NO64BITIO -DSDLMAME_ARM -DRETRO_SETJMP_HACK $(fpic)
#	ifeq ($(VRENDER),opengl)
#		PLATCFLAGS += -DHAVE_GL
#		LIBS += -lGLESv2
#		GLES = 1
#	endif
#	LDFLAGS += -Wl,--fix-cortex-a8 -Wl,--no-undefined -llog $(fpic) $(SHARED)
#	CCOMFLAGS += $(PLATCFLAGS)
#	LIBS += -lstdc++
### OS X
#else ifeq ($(platform), osx)
#	TARGETLIB := $(TARGET)_libretro.dylib
#	fpic := -fPIC -mmacosx-version-min=10.7
#	LIBCXX := libstdc++
#	LDFLAGSEMULATOR +=  -stdlib=$(LIBCXX)
#	PLATCFLAGS += $(fpic)
#	SHARED := -dynamiclib
#	# Uses gcc or clang, whichever is default
#	CXX_AS := c++
#	REALCC := cc
#	CC := $(CXX_AS) -stdlib=$(LIBCXX)
#	LD := $(CXX_AS) -stdlib=$(LIBCXX)
#	LDFLAGS +=  $(fpic) $(SHARED)
#	AR := @ar
#	ifeq ($(COMMAND_MODE),"legacy")
#		ARFLAGS = -crs
#	endif
#	ifneq (,$(findstring Power,$(UNAME)))
#		BIGENDIAN=1
#	else
#		PLATCFLAGS += -DLSB_FIRST
#	endif
#	PLATCFLAGS += -DSDLMAME_NO64BITIO -DOSX
#	CCOMFLAGS += $(PLATCFLAGS)
### iOS
#else ifneq (,$(findstring ios,$(platform)))
#	armplatform := 1
#	TARGETLIB := $(TARGET)_libretro_ios.dylib
#	fpic := -fPIC
#	SHARED := -dynamiclib
#	LIBCXX := libstdc++
#
#	IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
#	CXX_AS := c++
#	REALCC = cc -arch armv7 -isysroot $(IOSSDK)
#	CC = $(CXX_AS) -arch armv7 -isysroot $(IOSSDK)
#	LD = $(CC) -stdlib=$(LIBCXX)
#	LDFLAGS +=  $(fpic) $(SHARED)
#	LDFLAGSEMULATOR += -stdlib=$(LIBCXX)
#	PLATCFLAGS += -mfloat-abi=softfp -marm -DSDLMAME_NO64BITIO -DIOS -DSDLMAME_ARM -DHAVE_POSIX_MEMALIGN
#	CCOMFLAGS += $(PLATCFLAGS)
### QNX
#else ifeq ($(platform), qnx)
#	armplatform := 1
#	TARGETLIB := $(TARGET)_libretro_qnx.so
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T
#
#	CC := qcc -Vgcc_ntoarmv7le
#	REALCC := qcc -Vgcc_ntoarmv7le
#	AR := qcc -Vgcc_ntoarmv7le
#	CFLAGS += -D__BLACKBERRY_QNX__
#	LIBS += -lstdc++ -lpthread
#
### PS3
# mame isn't likely to run very well on PS3, but if you want to make it work,
# these blocks are a start (don't forget to set REALCC as well)
#else ifeq ($(platform), ps3)
#	TARGETLIB := $(TARGET)_libretro_ps3.a
#	CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
#	AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## sncps3
#else ifeq ($(platform), sncps3)
#	TARGETLIB := $(TARGET)_libretro_ps3.a
#	CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
#	AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Lightweight PS3 Homebrew SDK
#else ifeq ($(platform), psl1ght)
#	TARGETLIB := $(TARGET)_libretro_psl1ght.a
#	CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
#	AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## PSP
#else ifeq ($(platform), psp1)
#	TARGETLIB := $(TARGET)_libretro_psp1.a
#	CC = psp-g++$(EXE_EXT)
#	AR = psp-ar$(EXE_EXT)
#	CFLAGS += -DPSP -G0
#	STATIC_LINKING = 1
#	LIBS += -lstdc++ -lpthread
#
## Xbox 360
#else ifeq ($(platform), xenon)
#	TARGETLIB := $(TARGET)_libretro_xenon360.a
#	CC = xenon-g++$(EXE_EXT)
#	AR = xenon-ar$(EXE_EXT)
#	CFLAGS += -D__LIBXENON__ -m32 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Nintendo Game Cube
#else ifeq ($(platform), ngc)
#	TARGETLIB := $(TARGET)_libretro_ngc.a
#	CC = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
#	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
#	CFLAGS += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Nintendo Wii
#else ifeq ($(platform), wii)
#	TARGETLIB := $(TARGET)_libretro_wii.a
#	CC = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
#	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
#	CFLAGS += -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## ARM
#else ifneq (,$(findstring armv,$(platform)))
#	armplatform := 1
#	TARGETLIB := $(TARGET)_libretro.so
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T -Wl,--no-undefined
#	CCOMFLAGS += $(fpic) -mstructure-size-boundary=32 -falign-functions=16 -fsigned-char -finline -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
#	PLATCFLAGS += -march=armv7-a -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -fstrict-aliasing -fno-merge-constants -DSDLMAME_NO64BITIO -DSDLMAME_ARM -DRETRO_SETJMP_HACK
#	LDFLAGS += -Wl,--fix-cortex-a8 -Wl,--no-as-needed $(fpic) $(SHARED)
#	CC = g++
#	AR = @ar
#	LD = g++
#	CCOMFLAGS += $(PLATCFLAGS)
#
#	ifneq (,$(findstring cortexa8,$(platform)))
#		PLATCFLAGS += -marm -mcpu=cortex-a8
#	else ifneq (,$(findstring cortexa9,$(platform)))
#		PLATCFLAGS += -marm -mcpu=cortex-a9
#	endif
#	PLATCFLAGS += -marm
#	ifneq (,$(findstring neon,$(platform)))
#		PLATCFLAGS += -mfpu=neon
#		HAVE_NEON = 1
#	endif
#	ifneq (,$(findstring softfloat,$(platform)))
#		PLATCFLAGS += -mfloat-abi=softfp
#	else ifneq (,$(findstring hardfloat,$(platform)))
#		PLATCFLAGS += -mfloat-abi=hard
#	endif
#	ifeq ($(VRENDER),opengl)
#		PLATCFLAGS += -DHAVE_GL
#		LIBS += -lGLESv2
#		GLES = 1
#	endif
#
#	PLATCFLAGS += -DARM
#	LIBS += -lstdc++ -lpthread -ldl
#
### Windows cross compiler
#else ifeq ($(platform), wincross)
#	TARGETLIB := $(TARGET)_libretro.dll
#	# You're going to have to pass REALCC=<whatever> on the cmdline for wincross
#	REALCC := gcc
#	CC := g++
#	LD := $(CC)
#	SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/osd/retro/link.T
#	CCOMFLAGS += -D__WIN32__
#	LDFLAGS += $(SHARED)
#	ifeq ($(VRENDER),opengl)
#		CCOMFLAGS += -DHAVE_GL
#		LIBS += -lopengl32
#	endif
#	EXE = .exe
#	ifneq (,$(findstring mingw64-w64,$(PATH)))
#		PTR64=1
#	endif
#
#else
#	## Windows
#	TARGETLIB := $(TARGET)_libretro.dll
#	REALCC = gcc
#	CC = g++
#	LD = $(CC)
#	SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/osd/retro/link.T
#	CCOMFLAGS += -D__WIN32__
#	LDFLAGS += $(SHARED)
#	ifeq ($(VRENDER),opengl)
#		CCOMFLAGS += -DHAVE_GL
#		LIBS += -lopengl32
#	endif
#	EXE = .exe
#	LIBS += -lws2_32
#	# FIXME: Check if TARGETOS does this in makefile for you
#	#        Also I'm not sure the PTR64 stuff is being done right
#	DEFS += -DX64_WINDOWS_ABI
#	ifneq ($(findstring MINGW,$(shell uname -a)),)
#		PTR64=1
#	endif
#endif
#
#ifeq ($(platform), osx)
#CONLYFLAGS += -ansi
#else
#CONLYFLAGS += -std=gnu89
#endif
#
#libretro-target: clean-osd $(EMULATOR)
#
## This replaces the $(EMULATOR) rule in makefile, so if that changes you may
## need to modify this recipe accordingly.
#$(EMULATOR): $(EMUINFOOBJ) $(DRIVLISTOBJ) $(DRVLIBS) $(OSDOBJS) $(LIBBUS) $(LIBOPTIONAL) $(LIBEMU) $(LIBDASM) $(LIBUTIL) $(EXPAT) $(SOFTFLOAT) $(JPEG_LIB) $(FLAC_LIB) $(7Z_LIB) $(FORMATS_LIB) $(LUA_LIB) $(SQLITE3_LIB) $(WEB_LIB) $(ZLIB) $(LIBOCORE) $(MIDI_LIB) $(RESFILE)
#	$(CC) $(CDEFS) $(CFLAGS) -c $(SRC)/version.c -o $(VERSIONOBJ)
#	@echo Linking $(TARGETLIB)
#	$(LD) $(LDFLAGS) $(LDFLAGSEMULATOR) $(VERSIONOBJ) $^ $(LIBS) -o $(TARGETLIB)
#
## Upstream cleans $(OBJ) which may not get everything
#clean: clean-libretro
#clean-libretro:
#	@echo Deleting object tree obj...
#	$(RM) -r obj/*
#	@echo Deleting old build products...
#	$(RM) *.dll *.so *.dylib
#
## retro OSD varies between mame, mess, ume so clean it between each
#clean-osd:
#	@echo Deleting object tree obj/osd...
#	$(RM) -r obj/osd/*
#
#.PHONY: clean-osd
