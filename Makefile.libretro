###########################################################################
#
#   Makefile.libretro
#
#   Makefile for building MAME and derivatives as libretro core libraries
#
#   Copyright (C) 2015 Libretro Team.
#   Licensing should be regarded as the same as that of the MAME project,
#   visit http://mamedev.org for more information.
#
###########################################################################

UNAME=$(shell uname -a)
ifeq ($(platform),)
	platform = unix
	ifeq ($(UNAME),)
		platform = win
	else ifneq ($(findstring MINGW,$(UNAME)),)
		platform = win
	else ifneq ($(findstring Darwin,$(UNAME)),)
		platform = osx
	else ifneq ($(findstring win,$(UNAME)),)
		platform = win
	endif
endif


BUILD_EXPAT = 1
BUILD_FLAC = 1
BUILD_JPEGLIB = 1

ifneq ($(platform), android)
	BUILD_ZLIB = 1
else
	BUILD_ZLIB = 0
endif

VRENDER ?= soft


##
## OLD MAKEFILE.LIBRETRO STUFF
## Feel free to remove stuff from here as you become certain we don't need it
## in the new Makefile.libretro
##
#
##-------------------------------------------------
## platform-specific definitions
##-------------------------------------------------
#
## build the targets in different object dirs, so they can co-exist
#ifeq ($(NATIVE),1)
#OBJ = obj/$(PREFIX)$(OSD)$(SUFFIX)$(SUFFIX64)$(SUFFIXDEBUG)$(SUFFIXPROFILE)
#else
#OBJ = obj/$(PREFIX)$(SUFFIXDEBUG)$(SUFFIXPROFILE)
#endif
#
# -iKarith- PortMidi is in mamedev's makefile, but we disable it.  Should
#  someday fix that.
## add PortMidi MIDI library
#ifeq ($(BUILD_MIDILIB),1)
#INCPATH += -I$(SRC)/lib/portmidi
#MIDI_LIB = $(OBJ)/libportmidi.a
#else
##LIBS += -lportmidi
#MIDI_LIB =
#endif
#
##-------------------------------------------------
## 'default' target needs to go here, before the
## include files which define additional targets
##-------------------------------------------------
#
#default: maketree buildtools emulator
#
#all: default tools
#
#tests: maketree jedutil$(EXE_EXT) chdman$(EXE_EXT)
#
##-------------------------------------------------
## defines needed by multiple make files
##-------------------------------------------------
#
#ifdef NATIVE_OBJ
#BUILDOUT = $(NATIVE_OBJ)/build
#endif # NATIVE_OBJ
#
#
##-------------------------------------------------
#
#buildtools: maketree $(BUILD)
#ifeq ($(NATIVE),1)
#	mkdir prec-build
#	cp -R $(OBJ)/build/* prec-build/
#	$(RM) -r $(OBJ)/osd
#	$(RM) -r $(OBJ)/lib/util
#	$(RM) -r $(OBJ)/libutil.a
#	$(RM) -r $(OBJ)/libocore.a
#endif
#
#
#BUILDTOOLS_CUSTOM = 0
#
#ifeq ($(platform), android)
#BUILDTOOLS_CUSTOM = 1
#else ifeq ($(platform), ios)
#BUILDTOOLS_CUSTOM = 1
#endif
#
#ifeq ($(NATIVE),0)
#ifeq ($(BUILDTOOLS_CUSTOM),1)
#$(OBJ)/build/file2str:
#	mkdir -p $(OBJ)/build
#	cp -R prec-build/file2str $(OBJ)/build
#
#$(OBJ)/build/m68kmake:
#	cp -R prec-build/m68kmake $(OBJ)/build
#
#$(OBJ)/build/png2bdc:
#	cp -R prec-build/png2bdc $(OBJ)/build
#
#$(OBJ)/build/makedep:
#	cp -R prec-build/makedep $(OBJ)/build
#
#$(OBJ)/build/makelist:
#	cp -R prec-build/makelist $(OBJ)/build
#
#$(OBJ)/build/verinfo:
#	cp -R prec-build/verinfo $(OBJ)/build
#
#$(OBJ)/build/makemak:
#	cp -R prec-build/makemak $(OBJ)/build
#endif
#endif

###########################################################################

# If we define this, MAME's makefile will not define final linking rules
EXECUTABLE_DEFINED = 1

# MAME doesn't need this, bit libretro still does
ifeq ($(TARGET), mess)
	CORE_DEFINE := -DWANT_MESS
else ifeq ($(TARGET), mame)
	CORE_DEFINE := -DWANT_MAME
else
	CORE_DEFINE := -DWANT_UME
endif

override EMULATOR = $(TARGET)
NOWERROR = 1
OSD = retro
OPTIMIZE = 3
NO_USE_MIDI = 1
DEFS += -DNDEBUG
INCPATH += -I$(3RDPARTY)/libflac/src/libFLAC/include

# $(PYTHON) needs to be python 2.x
ifeq ($(platform), unix)
	override PYTHON ?= python2
else ifeq ($(platform), osx)
	override PYTHON ?= python
else ifeq ($(platform), ios)
	override PYTHON ?= python
else
	override PYTHON ?= python
endif

include makefile

CPPONLYFLAGS += -fpermissive
DEFS += $(CORE_DEFINE)


## Unix
ifeq ($(platform), unix)
	TARGETLIB := $(TARGET)_libretro.so
	TARGETOS=linux
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T -Wl,--no-undefined
	CCOMFLAGS += $(fpic) -fsigned-char -finline  -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
	PLATCFLAGS +=  -DALIGN_INTS -DALIGN_SHORTS -fstrict-aliasing -fno-merge-constants  $(fpic)
	ifeq ($(VRENDER),opengl)
		PLATCFLAGS += -DHAVE_GL
		LIBS += -lGL
	endif
	LDFLAGS +=  $(fpic) $(SHARED)
	REALCC = cc
#	NATIVECC = g++
#	NATIVECFLAGS = -std=gnu99
	BASELIBS +=  -lpthread
	CC = g++
	AR = @ar
	LD = g++
	CCOMFLAGS += $(PLATCFLAGS)
	LIBS += -lstdc++ -lpthread -ldl
	ifeq ($(firstword $(filter x86_64,$(UNAME))),x86_64)
		PTR64 = 1
	endif
	ifeq ($(firstword $(filter amd64,$(UNAME))),amd64)
		PTR64 = 1
	endif
	ifeq ($(firstword $(filter ppc64,$(UNAME))),ppc64)
		PTR64 = 1
	endif
	ifneq (,$(findstring ppc,$(UNAME)))
		BIGENDIAN=1
	else
		PLATCFLAGS += -DLSB_FIRST
	endif
#
## Android
#else ifeq ($(platform), android)
#	armplatform := 1
#	TARGETLIB := $(TARGET)_libretro.so
#	TARGETOS=linux
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T
#	CC = @arm-linux-androideabi-g++
#	AR = @arm-linux-androideabi-ar
#	LD = @arm-linux-androideabi-g++
#	FORCE_DRC_C_BACKEND = 1
#	CCOMFLAGS += -fPIC -mstructure-size-boundary=32 -mthumb-interwork -falign-functions=16 -fsigned-char -finline  -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
#	PLATCFLAGS += -march=armv7-a -mfloat-abi=softfp -DANDROID -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -fstrict-aliasing -fno-merge-constants -DSDLMAME_NO64BITIO -DSDLMAME_ARM -DRETRO_SETJMP_HACK
#	ifeq ($(VRENDER),opengl)
#		PLATCFLAGS += -DHAVE_GL
#		LIBS += -lGLESv2
#		GLES = 1
#	endif
#	LDFLAGS += -Wl,--fix-cortex-a8 -llog $(fpic) $(SHARED)
#	NATIVECC = g++
#	NATIVECFLAGS = -std=gnu99
#	CCOMFLAGS += $(PLATCFLAGS)
#	LIBS += -lstdc++
#	#-lpthread
#
## OS X
else ifeq ($(platform), osx)
	TARGETLIB := $(TARGET)_libretro.dylib
	TARGETOS = macosx
	fpic := -fPIC -mmacosx-version-min=10.7
	LIBCXX := libstdc++
	LDFLAGSEMULATOR +=  -stdlib=$(LIBCXX)
	PLATCFLAGS += $(fpic)
	SHARED := -dynamiclib
	CXX_AS = c++
	REALCC = cc
	CC = $(CXX_AS) -stdlib=$(LIBCXX)
	LD = $(CXX_AS) -stdlib=$(LIBCXX)
#	NATIVECC = $(CXX_AS)
	LDFLAGS +=  $(fpic) $(SHARED)
	AR = @ar
	ifeq ($(COMMAND_MODE),"legacy")
		ARFLAGS = -crs
	endif
	ifeq ($(firstword $(filter x86_64,$(UNAME))),x86_64)
		PTR64 = 1
	endif
	ifeq ($(firstword $(filter amd64,$(UNAME))),amd64)
		PTR64 = 1
	endif
	ifeq ($(firstword $(filter ppc64,$(UNAME))),ppc64)
		PTR64 = 1
	endif
	ifneq (,$(findstring Power,$(UNAME)))
		BIGENDIAN=1
	else
		PLATCFLAGS += -DLSB_FIRST
	endif
	PLATCFLAGS += -DSDLMAME_NO64BITIO -DOSX
	CCOMFLAGS += $(PLATCFLAGS)
## iOS
#else ifeq ($(platform), ios)
#	armplatform := 1
#	FORCE_DRC_C_BACKEND = 1
#	TARGETLIB := $(TARGET)_libretro_ios.dylib
#	fpic := -fPIC
#	SHARED := -dynamiclib
#	TARGETOS = macosx
#	LIBCXX := libc++
#
#	IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
#	CXX_AS := c++
#	REALCC = cc -arch armv7 -sysroot $(IOSSDK)
#	CC = $(CXX_AS) -arch armv7 -isysroot $(IOSSDK)
#	LD = $(CC) -stdlib=$(LIBCXX)
#	LDFLAGS +=  $(fpic) $(SHARED)
#	NATIVECC = $(CXX_AS)
#	CFLAGS += -DIOS
#	LDFLAGSEMULATOR += -stdlib=$(LIBCXX)
#	PLATCFLAGS += -DSDLMAME_NO64BITIO -DIOS -DSDLMAME_ARM -DHAVE_POSIX_MEMALIGN
#	CCOMFLAGS += $(PLATCFLAGS)
#
## QNX
else ifeq ($(platform), qnx)
	armplatform := 1
	TARGETLIB := $(TARGET)_libretro_qnx.so
	TARGETOS=linux
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T

	CC = qcc -Vgcc_ntoarmv7le
	REALCC = qcc -Vgcc_ntoarmv7le
	AR = qcc -Vgcc_ntoarmv7le
	CFLAGS += -D__BLACKBERRY_QNX__
	LIBS += -lstdc++ -lpthread

## PS3
# mame isn't likely to run very well on PS3, but if you want to make it work,
# these blocks are a start (don't forget to set REALCC as well)
#else ifeq ($(platform), ps3)
#	TARGETLIB := $(TARGET)_libretro_ps3.a
#	CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
#	AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## sncps3
#else ifeq ($(platform), sncps3)
#	TARGETLIB := $(TARGET)_libretro_ps3.a
#	CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
#	AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Lightweight PS3 Homebrew SDK
#else ifeq ($(platform), psl1ght)
#	TARGETLIB := $(TARGET)_libretro_psl1ght.a
#	CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
#	AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## PSP
#else ifeq ($(platform), psp1)
#	TARGETLIB := $(TARGET)_libretro_psp1.a
#	CC = psp-g++$(EXE_EXT)
#	AR = psp-ar$(EXE_EXT)
#	CFLAGS += -DPSP -G0
#	STATIC_LINKING = 1
#	LIBS += -lstdc++ -lpthread
#
## Xbox 360
#else ifeq ($(platform), xenon)
#	TARGETLIB := $(TARGET)_libretro_xenon360.a
#	CC = xenon-g++$(EXE_EXT)
#	AR = xenon-ar$(EXE_EXT)
#	CFLAGS += -D__LIBXENON__ -m32 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Nintendo Game Cube
#else ifeq ($(platform), ngc)
#	TARGETLIB := $(TARGET)_libretro_ngc.a
#	CC = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
#	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
#	CFLAGS += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Nintendo Wii
#else ifeq ($(platform), wii)
#	TARGETLIB := $(TARGET)_libretro_wii.a
#	CC = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
#	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
#	CFLAGS += -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## ARM
#else ifneq (,$(findstring armv,$(platform)))
#	armplatform := 1
#	TARGETLIB := $(TARGET)_libretro.so
#	TARGETOS=linux
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T -Wl,--no-undefined
#	CCOMFLAGS += $(fpic) -mstructure-size-boundary=32 -falign-functions=16 -fsigned-char -finline -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
#	PLATCFLAGS += -march=armv7-a -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -fstrict-aliasing -fno-merge-constants -DSDLMAME_NO64BITIO -DSDLMAME_ARM -DRETRO_SETJMP_HACK
#	LDFLAGS += -Wl,--fix-cortex-a8 -Wl,--no-as-needed $(fpic) $(SHARED)
#	NATIVECC = g++
#	NATIVECFLAGS = -std=gnu99
#	CC = g++
#	AR = @ar
#	LD = g++
#	CCOMFLAGS += $(PLATCFLAGS)
#
#	ifneq (,$(findstring cortexa8,$(platform)))
#		PLATCFLAGS += -marm -mcpu=cortex-a8
#	else ifneq (,$(findstring cortexa9,$(platform)))
#		PLATCFLAGS += -marm -mcpu=cortex-a9
#	endif
#	PLATCFLAGS += -marm
#	ifneq (,$(findstring neon,$(platform)))
#		PLATCFLAGS += -mfpu=neon
#		HAVE_NEON = 1
#	endif
#	ifneq (,$(findstring softfloat,$(platform)))
#		PLATCFLAGS += -mfloat-abi=softfp
#	else ifneq (,$(findstring hardfloat,$(platform)))
#		PLATCFLAGS += -mfloat-abi=hard
#	endif
#	ifeq ($(VRENDER),opengl)
#		PLATCFLAGS += -DHAVE_GL
#		LIBS += -lGLESv2
#		GLES = 1
#	endif
#
#	PLATCFLAGS += -DARM
#	LIBS += -lstdc++ -lpthread -ldl
#
## Windows cross compiler
#else ifeq ($(platform), wincross)
#	TARGETLIB := $(TARGET)_libretro.dll
#	TARGETOS = win32
#	CC ?= g++
#	LD ?= g++
#	SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/osd/retro/link.T
#	CCOMFLAGS += -D__WIN32__
#	LDFLAGS += $(SHARED)
#	ifeq ($(VRENDER),opengl)
#		CCOMFLAGS += -DHAVE_GL
#		LIBS += -lopengl32
#	endif
#	EXE = .exe
#	#LIBS += -lpthread
#	DEFS = -DCRLF=3
#	ifneq (,$(findstring mingw64-w64,$(PATH)))
#		PTR64=1
#	endif
#
else
	## Windows
	TARGETLIB := $(TARGET)_libretro.dll
	TARGETOS = win32
	CC = g++
	LD = g++
	SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/osd/retro/link.T
	CCOMFLAGS += -D__WIN32__
	LDFLAGS += $(SHARED)
	ifeq ($(VRENDER),opengl)
		CCOMFLAGS += -DHAVE_GL
		LIBS += -lopengl32
	endif
	EXE = .exe
	LIBS += -lws2_32
	DEFS = -DCRLF=3
	DEFS += -DX64_WINDOWS_ABI
	ifneq ($(findstring MINGW,$(shell uname -a)),)
		PTR64=1
	endif
endif

ifeq ($(platform), osx)
CONLYFLAGS += -ansi
else
CONLYFLAGS += -std=gnu89
endif


clean: clean-libretro

clean-libretro:
ifeq ($(PARTIAL),1)
	@echo Deleting object tree obj/osd...
	$(RM) -r obj/osd/*
# 	TODO: We should do this smarter at some point
	@echo Deleting build targets...
	$(RM) *_libretro.so *_libretro.dylib *_libretro.dll
else
	@echo Deleting object tree obj...
	$(RM) -r obj/*
endif

$(EMULATOR): $(EMUINFOOBJ) $(DRIVLISTOBJ) $(DRVLIBS) $(LIBOSD) $(LIBBUS) $(LIBOPTIONAL) $(LIBEMU) $(LIBDASM) $(LIBUTIL) $(EXPAT) $(SOFTFLOAT) $(JPEG_LIB) $(FLAC_LIB) $(7Z_LIB) $(FORMATS_LIB) $(LUA_LIB) $(SQLITE3_LIB) $(WEB_LIB) $(ZLIB) $(LIBOCORE) $(MIDI_LIB) $(RESFILE)
	$(CC) $(CDEFS) $(CFLAGS) -c $(SRC)/version.c -o $(VERSIONOBJ)
	@echo Linking $(TARGETLIB)
	$(LD) $(LDFLAGS) $(LDFLAGSEMULATOR) $(VERSIONOBJ) $^ $(LIBS) -o $(TARGETLIB)

